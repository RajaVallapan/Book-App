{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookdaoService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseURL = \"http://localhost:8080/api/v1/books\";\n    this.httpsOptions = {\n      headers: new HttpHeaders({\n        'Content=Type': 'application/json'\n      })\n    };\n  }\n  getLatestBookId() {\n    this.size = this.getBooksList();\n    return this.size.length + 1;\n  }\n  getBooksList() {\n    return this.httpClient.get(this.baseURL).pipe(catchError(this.errorHandler));\n  }\n  createBook(book) {\n    console.log('create book called in service class' + book.getBook());\n    return this.httpClient.post(this.baseURL, book).pipe(catchError(this.errorHandler));\n  }\n  getBookById(bookId) {\n    return this.httpClient.get(this.baseURL + '/' + bookId).pipe(catchError(this.errorHandler));\n  }\n  // findBookByName(bookName: string): Observable<Object>{\n  //   return this.httpClient.get<Book[]>(this.baseURL + '/' + bookName).\n  //   pipe(\n  //     catchError(this.errorHandler)\n  //   )\n  // }\n  updateBook(bookId, book) {\n    // console.log(bookId + 'service call');\n    return this.httpClient.put(this.baseURL + '/' + bookId, book).pipe(catchError(this.errorHandler));\n  }\n  deleteBook(bookId) {\n    return this.httpClient.delete(this.baseURL + '/' + bookId).pipe(catchError(this.errorHandler));\n  }\n  deleteAllBook(books) {\n    return this.httpClient.delete(this.baseURL + '/deleteall').pipe(catchError(this.errorHandler));\n  }\n  errorHandler(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error \n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error \n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(() => error);\n  }\n}\nBookdaoService.ɵfac = function BookdaoService_Factory(t) {\n  return new (t || BookdaoService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookdaoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookdaoService,\n  factory: BookdaoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAwCA,WAAW,QAAQ,sBAAsB;AAEjF,SAASC,UAAU,EAAcC,UAAU,QAAQ,MAAM;;;AAMzD,OAAM,MAAOC,cAAc;EASzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAPtB,YAAO,GAAG,oCAAoC;IAEtD,iBAAY,GAAG;MACbC,OAAO,EAAE,IAAIN,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAC6C;EAE9CO,eAAe;IACb,IAAI,CAACC,IAAI,GAAG,IAAI,CAACC,YAAY,EAAE;IAC/B,OAAO,IAAI,CAACD,IAAI,CAACE,MAAM,GAAG,CAAC;EAC3B;EAEFD,YAAY;IACV,OAAO,IAAI,CAACJ,UAAU,CAACM,GAAG,CAAS,IAAI,CAACC,OAAO,CAAC,CAChDC,IAAI,CACFZ,UAAU,CAAC,IAAI,CAACa,YAAY,CAAC,CAC9B;EACH;EAEAC,UAAU,CAACC,IAAW;IACpBC,OAAO,CAACC,GAAG,CAAC,qCAAqC,GAAGF,IAAI,CAACG,OAAO,EAAE,CAAC;IACnE,OAAO,IAAI,CAACd,UAAU,CAACe,IAAI,CAAC,IAAI,CAACR,OAAO,EAAEI,IAAI,CAAC,CAC/CH,IAAI,CACFZ,UAAU,CAAC,IAAI,CAACa,YAAY,CAAC,CAC9B;EACH;EAEAO,WAAW,CAACC,MAAc;IACxB,OAAO,IAAI,CAACjB,UAAU,CAACM,GAAG,CAAO,IAAI,CAACC,OAAO,GAAG,GAAG,GAAGU,MAAM,CAAC,CAC7DT,IAAI,CACFZ,UAAU,CAAC,IAAI,CAACa,YAAY,CAAC,CAC9B;EACH;EAEA;EACA;EACA;EACA;EACA;EACA;EAEAS,UAAU,CAACD,MAAc,EAAEN,IAAU;IACpC;IACC,OAAO,IAAI,CAACX,UAAU,CAACmB,GAAG,CAAC,IAAI,CAACZ,OAAO,GAAG,GAAG,GAAGU,MAAM,EAAEN,IAAI,CAAC,CAC7DH,IAAI,CACFZ,UAAU,CAAC,IAAI,CAACa,YAAY,CAAC,CAC9B;EACH;EAEAW,UAAU,CAACH,MAAc;IACvB,OAAO,IAAI,CAACjB,UAAU,CAACqB,MAAM,CAAC,IAAI,CAACd,OAAO,GAAG,GAAG,GAAGU,MAAM,CAAC,CAC1DT,IAAI,CACFZ,UAAU,CAAC,IAAI,CAACa,YAAY,CAAC,CAC9B;EACH;EAEAa,aAAa,CAACC,KAAa;IACzB,OAAO,IAAI,CAACvB,UAAU,CAACqB,MAAM,CAAC,IAAI,CAACd,OAAO,GAAG,YAAY,CAAC,CAC1DC,IAAI,CACFZ,UAAU,CAAC,IAAI,CAACa,YAAY,CAAC,CAC9B;EACH;EAEAA,YAAY,CAACe,KAAwB;IACnC,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAGD,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAC;MACnC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAK;MACJ;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IACvEf,OAAO,CAACC,GAAG,CAACY,YAAY,CAAC;IAC3B,OAAO5B,UAAU,CAAC,MAAI2B,KAAK,CAAC;EAC9B;;AA7EW1B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA+B,SAAd/B,cAAc;EAAAgC,YAFb;AAAM","names":["HttpHeaders","catchError","throwError","BookdaoService","constructor","httpClient","headers","getLatestBookId","size","getBooksList","length","get","baseURL","pipe","errorHandler","createBook","book","console","log","getBook","post","getBookById","bookId","updateBook","put","deleteBook","delete","deleteAllBook","books","error","errorMessage","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["E:\\Project\\BookStore-Management-System-main\\Frontend\\Book-App\\src\\app\\bookdao.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { Book } from './model/book';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookdaoService {\n  private books:Book[];\n  private baseURL = \"http://localhost:8080/api/v1/books\";\n  private size: any;\n  httpsOptions = {\n    headers: new HttpHeaders({\n      'Content=Type': 'application/json'\n    })\n  }\n  constructor(private httpClient: HttpClient) { }\n\n  getLatestBookId():number{\n    this.size = this.getBooksList();\n    return this.size.length + 1;\n    }\n\n  getBooksList(): Observable<Book[]>{\n    return this.httpClient.get<Book[]>(this.baseURL).\n    pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  createBook(book : Book): Observable<Object>{\n    console.log('create book called in service class' + book.getBook());\n    return this.httpClient.post(this.baseURL, book).\n    pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  getBookById(bookId: number): Observable<Book>{\n    return this.httpClient.get<Book>(this.baseURL + '/' + bookId).\n    pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  // findBookByName(bookName: string): Observable<Object>{\n  //   return this.httpClient.get<Book[]>(this.baseURL + '/' + bookName).\n  //   pipe(\n  //     catchError(this.errorHandler)\n  //   )\n  // }\n  \n  updateBook(bookId: number, book: Book): Observable<Object>{\n   // console.log(bookId + 'service call');\n    return this.httpClient.put(this.baseURL + '/' + bookId, book).\n    pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  deleteBook(bookId: number): Observable<Object>{\n    return this.httpClient.delete(this.baseURL + '/' + bookId).\n    pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  deleteAllBook(books: Book[]): Observable<Object>{\n    return this.httpClient.delete(this.baseURL + '/deleteall').\n    pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  errorHandler(error: HttpErrorResponse) { \n    let errorMessage = ''; \n    if(error.error instanceof ErrorEvent){ \n      // Get client-side error \n      errorMessage = error.error.message; \n    } else{ \n      // Get server-side error \n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`; \n    } console.log(errorMessage); \n    return throwError(()=>error); \n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}